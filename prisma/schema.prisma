generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int              @default(autoincrement()) @id
  uuid        String           @default(uuid()) @unique
  email       String           @unique
  name        String?
  password    String
  role        Role             @relation(fields: [roleId], references: [id])
  roleId      Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  comments    ArticleComment?
  @@index([email])
}

model Role {
  id          Int              @default(autoincrement()) @id
  uuid        String           @default(uuid()) @unique
  title       String           
  value       String           @unique
  users       User[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  @@index([value])
}

model Article {
  id                Int                  @default(autoincrement()) @id
  uuid              String               @default(uuid()) @unique
  title             String
  content           String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  deletedAt         DateTime?
  articleCategories ArticleCategory[]
  comments          ArticleComment[]
}

model Category {
  id                Int                  @default(autoincrement()) @id
  uuid              String               @default(uuid()) @unique
  title             String
  value             String               @unique
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  deletedAt         DateTime?
  articleCategories ArticleCategory[]
}

model ArticleCategory {
  id                Int                  @default(autoincrement()) @id
  uuid              String               @default(uuid()) @unique
  article           Article              @relation(fields: [articleId], references: [id])
  articleId         Int
  category          Category             @relation(fields: [categoryId], references: [id])
  categoryId        Int
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  deletedAt         DateTime?
  @@index([articleId])
  @@index([categoryId])
}

model ArticleComment {
  id                Int                  @default(autoincrement()) @id
  uuid              String               @default(uuid()) @unique
  article           Article              @relation(fields: [articleId], references: [id])
  articleId         Int
  user              User                 @relation(fields: [userId], references: [id])
  userId            Int @unique
  content           String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  deletedAt         DateTime?
  @@index([userId])
}